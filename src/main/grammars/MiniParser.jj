options {
  JDK_VERSION = "1.8";
  CACHE_TOKENS = true;
  IGNORE_CASE = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(MiniParser)

package net.kyori.adventure.text.minimessage.parser.gen;

import java.util.*;
import net.kyori.adventure.text.minimessage.parser.*;
import net.kyori.adventure.text.minimessage.parser.Element.*;

public final class MiniParser {
}

PARSER_END(MiniParser)

//
// Lexer definition
//

TOKEN_MGR_DECLS : {
  int prevLexState;
}

// Strings
// Single quote
<single_quote> MORE : {
  "\\'"
  |
  < ~["\'"] >
}
<single_quote> TOKEN : {
  < SINGLE_QUOTE_STRING : "'" > { SwitchTo(prevLexState); }
}

// Double quote
<double_quote> MORE : {
  "\\\""
  |
  < ~["\""] >
}
<double_quote> TOKEN : {
  < DOUBLE_QUOTE_STRING : "\"" > { SwitchTo(prevLexState); }
}
// End strings

<DEFAULT> TOKEN : {
  < BEGIN_TAG : "<" > : tag
  |
  < BEGIN_CLOSE_TAG : "</" > : tag
  |
  < TEXT : ( ~["<"] | "\\<" )+ >
}

<tag> TOKEN : {
  < COLON : ":">
  |
  < END_TAG : ">" > : DEFAULT
  |
  < TAG_VALUE : ( "://" | ~[":", ">", "'", "\""] )+ >
}

<tag> MORE : {
  "'" { prevLexState = curLexState; } : single_quote
  |
  "\"" { prevLexState = curLexState; } : double_quote
}

//
// Parser definition
//

List<Element> message() :
{
  final List<Element> elements = new ArrayList<Element>();
}
{
  ( textComponent(elements) )* <EOF>
  {
    return elements;
  }
}

void textComponent(List<Element> elements) :
{
  Element element;
}
{
  ( element = rawText() | element = openTag() | element = closeTag() )
  {
    elements.add(element);
  }
}

Element rawText() :
{
  Token token;
}
{
  token = <TEXT>
  {
    return new RawTextElement(token, token.toString().replace("\\<", "<"));
  }
}

Element openTag() :
{
  final TagElement element;
  Token token;
}
{
  token = <BEGIN_TAG>
  {
    element = new OpenTagElement(token);
  }
  tagStructure(element)
  {
    return element;
  }
}

Element closeTag() :
{
  final TagElement element;
  Token token;
}
{
  token = <BEGIN_CLOSE_TAG>
  {
    element = new CloseTagElement(token);
  }
  tagStructure(element)
  {
    return element;
  }
}

void tagStructure(TagElement element) : {}
{
  tagValue(element) ( <COLON> tagValue(element) )* <END_TAG>
}

void tagValue(TagElement element) :
{
  TagPart value;
}
{
  ( value = literalTagValue() | value = stringValue() )
  {
    element.getParts().add(value);
  }
}

TagPart literalTagValue() :
{
  Token token;
  TagPart part;
}
{
  token = <TAG_VALUE>
  {
    return new TagPart(token, token.toString());
  }
}

TagPart stringValue() :
{
  Token token;
  TagPart part;
}
{
  ( token = <SINGLE_QUOTE_STRING> | token = <DOUBLE_QUOTE_STRING> )
  {
    final String value = token.toString();
    final String inside = value.substring(1, value.length() - 1);
    if (token.kind == SINGLE_QUOTE_STRING) {
      return new TagPart(token, inside.replace("\\'", "'"));
    } else {
      return new TagPart(token, inside.replace("\\\"", "\""));
    }
  }
}
